{
  "name": "angular-simple-logger",
  "version": "0.0.4",
  "description": "Basic logger with level logging which can also be independent.",
  "main": "./dist/angular-simple-logger.js",
  "scripts": {
    "start": "gulp",
    "test": "gulp spec"
  },
  "homepage": "https://github.com/nmccready/angular-simple-logger",
  "repository": {
    "type": "git",
    "url": "git://github.com/nmccready/angular-simple-logger.git"
  },
  "author": {
    "name": "Nicholas McCready"
  },
  "license": "MIT",
  "dependencies": {
    "angular": "^1.2"
  },
  "devDependencies": {
    "angular-mocks": "^1.2",
    "chai": "^3.2.0",
    "coffee-script": "^1.9.3",
    "del": "^2.0.0",
    "gulp": "git://github.com/gulpjs/gulp.git#bbe3c56138a9ede627879d7e47daffd0a6d9b6db",
    "gulp-coffee": "^2.3.1",
    "gulp-coffeelint": "^0.5.0",
    "gulp-concat": "^2.6.0",
    "gulp-debug": "^2.1.0",
    "gulp-if": "^1.2.5",
    "gulp-insert": "^0.5.0",
    "gulp-open": "^1.0.0",
    "gulp-replace": "^0.5.4",
    "gulp-task-listing": "^1.0.1",
    "gulp-uglify": "^1.4.1",
    "gulp-util": "^3.0.6",
    "jasmine-core": "^2.3.4",
    "karma": "^0.13.9",
    "karma-chrome-launcher": "^0.2.0",
    "karma-coffee-preprocessor": "^0.3.0",
    "karma-coverage": "^0.5.1",
    "karma-jasmine": "^0.3.6",
    "karma-mocha-reporter": "^1.1.1",
    "karma-phantomjs-launcher": "^0.2.1",
    "mocha": "^2.3.0",
    "phantomjs": "^1.9.18",
    "require-directory": "^2.1.1"
  },
  "readme": "angular-simple-logger (nemLogging.nemSimpleLogger)\n==============\n[![Dependencies](https://david-dm.org/nmccready/angular-simple-logger.png)](https://david-dm.org/nmccready/angular-simple-logger)&nbsp;\n[![Dependencies](https://david-dm.org/nmccready/angular-simple-logger.png)](https://david-dm.org/nmccready/angular-simple-logger)&nbsp;\n[![Build Status](https://travis-ci.org/nmccready/angular-simple-logger.png?branch=master)](https://travis-ci.org/nmccready/angular-simple-logger)\n\n\n### Purpose:\nTo have simplified log levels where a supporting angular module's log levels are independent of the application.\n\n\n### Basic use:\n\n```js\nangular.module('someApp', ['nemLogging'])\n//note this can be any type of injectable angular dependency (factory, service.. etc)\n.controller(\"someController\", function ($scope, nemSimpleLogger) {\n  nemSimpleLogger.doLog = true; //default is true\n  nemSimpleLogger.currentLevel = nemSimpleLogger.LEVELS.debug;//defaults to error only\n});  \n```\n\n### Create a Custom Independent Loggers\n*(maybe 3 for one lib)*\n\n```js\nangular.module('someApp', ['nemLogging'])\n//note this can be any type of injectable angular dependency (factory, service.. etc)\n.service(\"apiLogger\", function ($scope, nemSimpleLogger) {\n  var logger = nemSimpleLogger.spawn();\n  logger.currentLevel = logger.LEVELS.warn;\n  return logger;\n})\n.service(\"businessLogicLogger\", function ($scope, nemSimpleLogger) {\n  var logger = nemSimpleLogger.spawn();\n  logger.currentLevel = logger.LEVELS.error;\n  return logger;\n})\n.service(\"terseLogger\", function ($scope, nemSimpleLogger) {\n  var logger = nemSimpleLogger.spawn();\n  logger.currentLevel = logger.LEVELS.info;\n  return logger;\n});\n```\n\n### Use your new creations!\n\n```js\nangular.module('someApp', ['nemLogging'])\n//note this can be any type of injectable angular dependency (factory, service.. etc)\n.service(\"booksApi\", function (apiLogger, $http) {\n  //do something with your books\n  $http.get(\"/ap/books\").then(function(data){\n    apiLogger.debug(\"books have come yay!\");\n  });\n})\n.controller(\"businessCtrl\", function ($scope, businessLogicLogger, book) {\n  businessLogicLogger.debug(\"new book\");\n  var b = new book();\n  $scope.books = [b];\n})\n.controller(\"appCtrl\", function ($rootScope, terseLogger) {\n  $rootScope.$on \"error\", function(){\n    terseLogger.error(\"something happened\");\n  }\n});\n```\n\n### Override all of $log (optional decorator)\n\nOptionally (default is off) decorate $log to utilize log levels globally within the app.\n\nNote this logger's currentLevel is info!\n\n```js\nangular.module('someApp', ['nemLogging']))\n.config(function($provide, nemSimpleLoggerProvider) {\n  return $provide.decorator.apply(null, nemSimpleLoggerProvider.decorator);\n})\n.config(function($provide, nemSimpleLoggerProvider) {\n  var logger = $provide.decorator.apply(null, nemSimpleLoggerProvider.decorator);\n  //override level at config\n  logger.currentLevel = logger.LEVELS.error;\n  return logger;\n})\n.run(function($log){\n  //at run time\n  //override the default log level globally\n  $log.currentLevel = $log.LEVELS.error;\n});\n```\n\n### API\nUnderneath it all it is still calling `$log` so calling the logger for logging itself is the same.\n\n- LEVELS: available are `log, info, debug, warn, error`\n\n- doLog (boolean) - deaults to true. If set to false all logging for that logger instance is disabled.\n\n- currentLevel (number) - defaults to `error: 5` corresponds to the current log level provided by `LEVELS`.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nmccready/angular-simple-logger/issues"
  },
  "_id": "angular-simple-logger@0.0.4",
  "_from": "angular-simple-logger@~0.0.1"
}
